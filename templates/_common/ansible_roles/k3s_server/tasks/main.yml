# Install K3s
# advertise-address: internal address (?) (from the docs: "IP address that apiserver uses to advertise to members of the cluster")
# node-ip: similar for node (which orchestrator also hosts) (?) (from the docs: "IP address to advertise for node")
---
- name: Download K3s binary
  get_url:
    url: https://repo.stackable.tech/repository/misc/k3s/{{ k8s_requested_version | default("stable", true) }}/k3s
    dest: /usr/local/bin/k3s
    mode: 0755

- name: Install K3s Server/API w/ rancher script
  shell: |
    curl -sfL https://get.k3s.io | \
      INSTALL_K3S_SKIP_SELINUX_RPM=true INSTALL_K3S_SKIP_DOWNLOAD=true \
      sh -s - \
      --tls-san orchestrator.{{ domain }} \
      --tls-san {{ ansible_host }} \
      --tls-san {{ hostvars['edge']['ansible_host'] }} \
      --advertise-address {{ ansible_host }} \
      --node-ip {{ ansible_host }} \
      --flannel-iface {{ private_network_interface_name }} \
      --node-taint CriticalAddonsOnly=true:NoExecute \
      --kube-apiserver-arg event-ttl=12h
  args:
    warn: no
    creates: /etc/rancher/k3s/k3s.yaml
  notify: restart k3s

- name: copy original config to be picked up for other users on this host
  shell: |
    cp /etc/rancher/k3s/k3s.yaml /tmp/kubeconfig.original
    chmod 444 /tmp/kubeconfig.original

- name: provide kubeconfig at standard location on this host
  shell: |
    mkdir -p {{ stackable_user_home }}.kube/
    cp /tmp/kubeconfig.original {{ stackable_user_home }}.kube/config
    chmod 600 {{ stackable_user_home }}.kube/config
  vars:
    ansible_become: false

- name: generate kubeconfig for cluster-internal use
  shell: cat /etc/rancher/k3s/k3s.yaml | sed s/127.0.0.1/{{ ansible_host }}/g > /tmp/kubeconfig_internal

- name: generate kubeconfig for public use
  shell: cat /etc/rancher/k3s/k3s.yaml | sed s/127.0.0.1/{{ hostvars['edge']['ansible_host'] }}/g > /tmp/kubeconfig_public

- name: set env variable to point to kubeconfig for Stackable user
  lineinfile:
    dest: "{{ stackable_user_home }}.bashrc"
    line: |

      # kubeconfig to be used by K9s, kubectl, ...
      export KUBECONFIG={{ stackable_user_home }}.kube/config
    state: present
    insertafter: EOF
  vars:
    ansible_become: false

- name: Fetch the cluster-internal kubeconfig
  fetch: 
    src: /tmp/kubeconfig_internal
    dest: kubeconfig_internal
    flat: yes

- name: Fetch the public kubeconfig
  fetch: 
    src: /tmp/kubeconfig_public
    dest: kubeconfig
    flat: yes

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  meta: flush_handlers
  
- name: Fetch content of K3s token file
  shell: "cat /var/lib/rancher/k3s/server/token"
  register: k3s_token_file

- name: extract Token to fact
  set_fact:
    k3s_token: "{{ k3s_token_file.stdout }}"
